/**
 * Options for creating a new passkey credential
 * Based on the WebAuthn PublicKeyCredentialCreationOptions specification
 */
export interface PublicKeyCreationOptions {
  /** Random challenge string generated by the server (base64url encoded) */
  challenge: string; //base64url
  /** Relying Party (RP) information - identifies your application/service */
  rp: PublicKeyCredentialRpEntity;
  /** User information for whom the credential is being created */
  user: {
    /** Unique user identifier (base64url encoded) */
    id: string; //base64url
    /** User's account name (e.g., username or email) */
    name: string;
    /** Human-readable display name for the user */
    displayName: string;
  };
  /** Acceptable cryptographic parameters for the new credential */
  pubKeyCredParams: PublicKeyCredentialParameters[];
  /** Requirements for authenticator selection (e.g., platform vs roaming) */
  authenticatorSelection?: AuthenticatorSelectionCriteria;
  /** Maximum time in milliseconds for the operation to complete */
  timeout?: number;
  /** Preference for attestation conveyance (none, indirect, direct, enterprise) */
  attestation?: AttestationConveyancePreference;
  /** WebAuthn extensions for additional functionality */
  extensions?: AuthenticationExtensionsClientInputs;
  /** List of credentials to exclude from creation (prevents duplicate registrations) */
  excludeCredentials?: {
    /** Credential identifier (base64url encoded) */
    id: string; // base64url
    /** Credential type (typically 'public-key') */
    type: string;
    /** Allowed transport methods for the credential */
    transports?: AuthenticatorTransport[];
  }[];
}

/**
 * Top-level options for passkey creation
 * Wraps PublicKeyCreationOptions to match WebAuthn navigator.credentials.create() structure
 */
export interface PasskeyCreateOptions {
  /** Public key credential creation options */
  publicKey: PublicKeyCreationOptions;
}

/**
 * Options for authenticating with an existing passkey
 * Based on the WebAuthn PublicKeyCredentialRequestOptions specification
 */
export interface PublicKeyAuthenticationOptions {
  /** Random challenge string generated by the server (base64url encoded) */
  challenge: string; // base64url
  /** List of acceptable credentials for authentication */
  allowCredentials?: {
    /** Credential identifier (base64url encoded) */
    id: string; // base64url
    /** Credential type (always 'public-key' for passkeys) */
    type: 'public-key';
    /** Allowed transport methods for the credential */
    transports?: AuthenticatorTransport[];
  }[];
  /** Relying Party identifier - must match the RP ID used during registration */
  rpId?: string;
  /** Maximum time in milliseconds for the operation to complete */
  timeout?: number;
  /** Requirement for user verification (biometric, PIN, etc.) */
  userVerification?: 'required' | 'preferred' | 'discouraged';
  /** WebAuthn extensions for additional functionality */
  extensions?: AuthenticationExtensionsClientInputs;
}

/**
 * Top-level options for passkey authentication
 * Wraps PublicKeyAuthenticationOptions to match WebAuthn navigator.credentials.get() structure
 */
export interface PasskeyAuthenticationOptions {
  /** Public key credential request options */
  publicKey: PublicKeyAuthenticationOptions;
}

/**
 * Result of a successful passkey creation operation
 * Contains the newly created credential data to be sent to the server for verification
 */
export interface PasskeyCreateResult {
  /** Base64url-encoded credential identifier */
  id: string;
  /** Base64url-encoded raw credential identifier (same as id but as ArrayBuffer) */
  rawId: string; // base64url string;
  /** Authenticator attestation response containing verification data */
  response: {
    /** Base64url-encoded attestation object containing the new public key and metadata */
    attestationObject: string; // base64url string;
    /** Base64url-encoded client data JSON containing challenge and origin information */
    clientDataJSON: string; // base64url string;
  };
}

/**
 * Result of a successful passkey authentication operation
 * Contains the authentication assertion data to be sent to the server for verification
 */
export interface PasskeyAuthResult {
  /** Base64url-encoded credential identifier that was used for authentication */
  id: string;
  /** Base64url-encoded raw credential identifier (same as id but as ArrayBuffer) */
  rawId: string; // base64url
  /** Credential type (typically 'public-key') */
  type: string;
  /** Authenticator assertion response containing verification data */
  response: {
    /** Base64url-encoded client data JSON containing challenge and origin information */
    clientDataJSON: string; // base64url
    /** Base64url-encoded authenticator data containing RP ID hash, flags, and signature counter */
    authenticatorData: string; // base64url
    /** Base64url-encoded cryptographic signature over authenticatorData and clientDataHash */
    signature: string; // base64url
    /** Base64url-encoded user handle (optional, may be null) */
    userHandle?: string; // base64url, optional
  };
}

/**
 * Main plugin interface for passkey operations
 * Provides methods for creating and authenticating with passkeys across iOS and Android platforms
 */
export interface PasskeyPlugin {
  /**
   * Creates a new passkey credential for the user
   * @param options Configuration options for passkey creation
   * @returns Promise resolving to the created credential data
   * @throws Error if creation fails (user cancellation, unsupported device, etc.)
   */
  createPasskey(options: PasskeyCreateOptions): Promise<PasskeyCreateResult>;

  /**
   * Authenticates the user with an existing passkey
   * @param options Configuration options for passkey authentication
   * @returns Promise resolving to the authentication assertion data
   * @throws Error if authentication fails (user cancellation, invalid credential, etc.)
   */
  authenticate(options: PasskeyAuthenticationOptions): Promise<PasskeyAuthResult>;
}
